#!/usr/bin/env python3
"""
Teste do Sistema de Adapta√ß√£o de Resolu√ß√£o
Demonstra como o sistema adapta os par√¢metros para diferentes resolu√ß√µes
"""

import os
import sys

# Adicionar src ao path para importa√ß√µes
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

import pyautogui

from config import BUTTON_DETECTION, RESOLUTION_ADAPTATION
from resolution_adapter import ResolutionAdapter


def test_resolution_adaptation():
    """Testa o sistema de adapta√ß√£o para diferentes resolu√ß√µes"""
    print("üîç TESTE DO SISTEMA DE ADAPTA√á√ÉO DE RESOLU√á√ÉO")
    print("=" * 60)

    # Resolu√ß√£o atual real
    adapter = ResolutionAdapter()
    current_resolution = pyautogui.size()
    print(
        f"üìê Resolu√ß√£o atual da tela: {current_resolution.width}x{current_resolution.height}"
    )

    # Configura√ß√£o adaptada para resolu√ß√£o atual
    config = adapter.get_adapted_config()
    print("\n‚úÖ Configura√ß√£o adaptada:")
    print(f"   - Largura m√≠nima do bot√£o: {config['min_width']}px")
    print(f"   - Largura m√°xima do bot√£o: {config['max_width']}px")
    print(f"   - Altura m√≠nima do bot√£o: {config['min_height']}px")
    print(f"   - Altura m√°xima do bot√£o: {config['max_height']}px")
    print(f"   - Margem das bordas: {config['edge_margin']}px")

    # Simular diferentes resolu√ß√µes
    test_resolutions = [
        (1366, 768),  # HD
        (1920, 1080),  # Full HD (base)
        (2560, 1440),  # QHD
        (3840, 2160),  # 4K
        (1024, 768),  # XGA
        (2880, 1800),  # MacBook Pro Retina
    ]

    print("\nüß™ SIMULA√á√ÉO PARA DIFERENTES RESOLU√á√ïES:")
    print("-" * 60)

    base_resolution = RESOLUTION_ADAPTATION["base_resolution"]

    for width, height in test_resolutions:
        # Calcular fatores de escala
        scale_x = width / base_resolution[0]
        scale_y = height / base_resolution[1]

        # Simular configura√ß√£o adaptada
        min_width = int(BUTTON_DETECTION["min_width"] * scale_x)
        max_width = int(BUTTON_DETECTION["max_width"] * scale_x)
        min_height = int(BUTTON_DETECTION["min_height"] * scale_y)
        max_height = int(BUTTON_DETECTION["max_height"] * scale_y)

        print(f"\nüì∫ {width}x{height} (escala: {scale_x:.2f}x, {scale_y:.2f}x)")
        print(f"   ‚îú‚îÄ Largura: {min_width}-{max_width}px")
        print(f"   ‚îî‚îÄ Altura:  {min_height}-{max_height}px")

    # Testar limites de escala
    print("\n‚ö†Ô∏è  TESTE DE LIMITES:")
    print("-" * 30)

    min_scale = RESOLUTION_ADAPTATION["min_scale_factor"]
    max_scale = RESOLUTION_ADAPTATION["max_scale_factor"]

    print(f"üìè Fator de escala m√≠nimo: {min_scale}x")
    print(f"üìè Fator de escala m√°ximo: {max_scale}x")

    # Teste com resolu√ß√£o muito pequena
    tiny_scale_x = 800 / base_resolution[0]  # ~0.42x
    if tiny_scale_x < min_scale:
        print(f"‚ö†Ô∏è  Resolu√ß√£o 800x600 seria limitada ao fator m√≠nimo ({min_scale}x)")

    # Teste com resolu√ß√£o muito grande
    huge_scale_x = 7680 / base_resolution[0]  # ~4.0x (8K)
    if huge_scale_x > max_scale:
        print(f"‚ö†Ô∏è  Resolu√ß√£o 8K seria limitada ao fator m√°ximo ({max_scale}x)")

    print("\n‚úÖ RESULTADO:")
    print("üéØ O sistema adapta automaticamente os par√¢metros de detec√ß√£o")
    print("üîÑ Mant√©m a precis√£o independente da resolu√ß√£o da tela")
    print("üõ°Ô∏è Aplica√ß√£o de limites de seguran√ßa previne valores extremos")
    print("‚ö° Cache evita rec√°lculos desnecess√°rios")

    return True


def test_cache_performance():
    """Testa a performance do sistema de cache"""
    print("\nüöÄ TESTE DE PERFORMANCE DO CACHE")
    print("=" * 40)

    import time

    adapter = ResolutionAdapter()

    # Primeira chamada (sem cache)
    start_time = time.time()
    config1 = adapter.get_adapted_config()
    first_call_time = time.time() - start_time

    # Segunda chamada (com cache)
    start_time = time.time()
    config2 = adapter.get_adapted_config()
    cached_call_time = time.time() - start_time

    print(f"‚è±Ô∏è  Primeira chamada: {first_call_time * 1000:.2f}ms")
    print(f"‚ö° Segunda chamada (cache): {cached_call_time * 1000:.2f}ms")

    if cached_call_time < first_call_time:
        speedup = (
            first_call_time / cached_call_time if cached_call_time > 0 else float("inf")
        )
        print(f"üéØ Acelera√ß√£o do cache: {speedup:.1f}x mais r√°pido")

    # Verificar se as configura√ß√µes s√£o id√™nticas
    assert config1 == config2, "Configura√ß√µes do cache devem ser id√™nticas"
    print("‚úÖ Cache funcionando corretamente!")

    return True


if __name__ == "__main__":
    try:
        print("üß™ SISTEMA DE TESTES - AUTO CLICKER PRO")
        print("üîß Testando adapta√ß√£o de resolu√ß√£o...")
        print()

        # Executar testes
        test_resolution_adaptation()
        test_cache_performance()

        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de adapta√ß√£o de resolu√ß√£o funcionando perfeitamente")

    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
