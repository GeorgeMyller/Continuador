[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "auto-clicker-pro"
version = "2.0.0"
description = "ðŸŽ¯ Sistema inteligente de detecÃ§Ã£o e automaÃ§Ã£o de cliques com interface moderna e arquitetura modular"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Auto Clicker Pro Team", email = "dev@autoclicker.pro"}
]
maintainers = [
    {name = "Auto Clicker Pro Team", email = "dev@autoclicker.pro"}
]
keywords = [
    "automation", "gui", "computer-vision", "auto-clicker", "opencv",
    "button-detection", "desktop-automation", "cv", "image-processing",
    "python", "tkinter", "modular-architecture", "cross-platform"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
    "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Office/Business :: Office Suites",
    "Environment :: Console",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Environment :: X11 Applications"
]
requires-python = ">=3.8"
dependencies = [
    "pyautogui>=0.9.54",
    "pynput>=1.7.6", 
    "keyboard>=0.13.5",
    "Pillow>=10.4.0",
    "numpy>=1.24.3",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.6",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.950",
    "isort>=5.0",
    "bandit>=1.7",
    "safety>=2.0",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.6",
    "pytest-xdist>=2.0",  # For parallel testing
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18.0",
]
build = [
    "build>=0.8.0",
    "twine>=4.0.0",
    "wheel>=0.37.0",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/auto-clicker-pro"
"Repository" = "https://github.com/yourusername/auto-clicker-pro"
"Bug Reports" = "https://github.com/yourusername/auto-clicker-pro/issues"
"Feature Requests" = "https://github.com/yourusername/auto-clicker-pro/issues/new?template=feature_request.md"
"Source" = "https://github.com/yourusername/auto-clicker-pro"
"Documentation" = "https://github.com/yourusername/auto-clicker-pro/wiki"
"Download" = "https://github.com/yourusername/auto-clicker-pro/releases"
"Changelog" = "https://github.com/yourusername/auto-clicker-pro/blob/main/CHANGELOG.md"
"Discussions" = "https://github.com/yourusername/auto-clicker-pro/discussions"
"CI/CD" = "https://github.com/yourusername/auto-clicker-pro/actions"

[project.scripts]
auto-clicker-pro = "main:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "pyautogui.*",
    "pynput.*",
    "PIL.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "src.ui",
    "src.detector",
    "src.monitor",
    "src.resolution_adapter",
    "src.app",
]
# Relax strict checks for modules that are mocked in CI/headless tests
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
warn_unused_ignores = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
